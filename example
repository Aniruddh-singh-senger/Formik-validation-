// let a = 10;
// let b = 20;
// [a,b] = [b,a]
// console.log(a,b)


// important method check starting here

// const people = [
//   { name: 'Alice', age: 21 },
//   { name: 'Max', age: 20 },
//   { name: 'Jane', age: 20 },
//   { name: 'Jayyee', age: 25 },
// ];

// // first method

// let accr = {}
// for (i=0; i < people.length; i++) {
//       let key = people[i].age
//     if (!accr[key]) {
//       accr[key] = []
//     }
//      accr[key].push(people[i])
// }
// console.log(accr)

// first method endhere

// second method

// let accr = {}
// for(let array of people){
//       let key = array.age
//     if (!accr[key]) {
//       accr[key] = []
//     }
//      accr[key].push(array)
// }
// console.log(accr)

// second method endhere

// third method

// let accr = {}
// people.map(acc =>{
//      let key = acc.age
//     if (!accr[key]) {
//       accr[key] = []
//     }
//      accr[key].push(acc)
// })
// console.log(accr)

// third method endhere

// fourth method

// function groupBy(objectArray, property) {
//   return objectArray.reduce(function (acc, obj) {
//     let key = obj[property]
//     //  console.log(key)
//     if (!acc[key]) {
//       acc[key] = []
//     }
//      acc[key].push(obj)
//     return acc
//   }, {})
// }

// let groupedPeople = groupBy(people, 'age')
// console.log(groupedPeople)

// fourth method endhere


// var data = [
//   { name: 'Alice', age: 21 },
//   { name: 'Max', age: 20 },
//   { name: 'Jane', age: 20 }
// ];
// for(i=0;i<data.length;i++){
// 	for(var x in data[i]){
// 	    console.log(x + " => " + data[i][x]);
// 	}
// }

// groupedPeople is:
// {
//   20: [
//     { name: 'Max', age: 20 },
//     { name: 'Jane', age: 20 }
//   ],
//   21: [{ name: 'Alice', age: 21 }]
// }

// important method check ending here

// const myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']
// let myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) {
//   if (previousValue.indexOf(currentValue) === -1) {
//     previousValue.push(currentValue)
//   }
//   return previousValue
// }, [])

// console.log(myArrayWithNoDuplicates)

// const numbers = [-5, 6, 2, 0,];

// const doubledPositiveNumbers = numbers.reduce((previousValue, currentValue) => {
//   if (currentValue > 0) {
//     const doubled = currentValue * 2;
//     previousValue.push(doubled);
//   }
//   return previousValue;
// }, []);

// console.log(doubledPositiveNumbers); // [12, 4]

// let flattened = [[0, 1], [2, 3], [4, 5]].reduce(
//   function(previousValue, currentValue) {
//       console.log(previousValue.concat(currentValue))
//     return previousValue.concat(currentValue)
//   },
//   []
// )
// console.log(flattened)
// flattened is [0, 1, 2, 3, 4, 5]



// const letters = ['a', 'b', 'c'];

// const alphaNumeric = letters.concat( [1 ,2, 3]);

// console.log(alphaNumeric);
// results in ['a', 'b', 'c', 1, 2, 3]

// const person = {
//   name: "Sarah",
//   address: {
//     number: 10,
//     street: "Functional Street"
//   }
// }

// const clonedPerson = { ...person }

// clonedPerson.address.number = 15
// console.log(clonedPerson.address.number) // 15
// console.log(person.address.number) 

// let a = [1, 2, 3, 4];
// let b = ["ram", "shyam", "sita", "gita"]

// let obj = {}

// a.map((value,index)=>{
// obj[value] = b[index]
// return obj
// })

// obj['rahul'] = 'ramesh'

// console.log(obj)

// for(i=0; i<a.length; i++){
//     let c = a[i]
//   obj[c] =  b[i]
// }
//   console.log(obj)


// let input =  [
//          ["John", 12],
//          ["Jack", 13],
//          ["Matt", 14],
//          ["Maxx", 15]
//       ]

// let obj = {}

// input.map((value)=>{
//     let a = value[0];
//     let b = value[1];
//     obj[a] = b
//     return obj 
// })

// console.log("output :", obj)

 // This is our array of Objects
        //   var data = [
        //         { id: 1, name: "a" },
        //         { id: 2, name: "b" },
        //         { id: 3, name: "c" },
        //         { id: 4, name: "d" },
        //         { id: 5, name: "e" },
        //         { id: 6, name: "f" },
        //     ];
  
        //     let idYouWant = 1;
        //     let propertyYouWant = "name";
  
        //     let res = data.find((item) => {
        //         return item.id == idYouWant;
        //     });
            
        //     console.log( res[propertyYouWant])
            
//         var obj = { "1": 500, "2": 15, "5": 4, "4": 480, "10": 87 };
     
//     // Using Object.entries() function
//     // to convert an Object {} to an
//     // Array [] of key-value pairs
//     var result = Object.entries(obj);
   
// const test = result.reduce((acc,value)=>{
//     return acc.concat(value) 
//  },[])
      
//         console.log(test)

// let recipeMap = new Map([
//   ['cucumber', 500],
//   ['tomatoes', 350],
//   ['onion',    50]
// ]);

// // iterate over keys (vegetables)
// for (let vegetable of recipeMap.keys()) {
//   console.log(vegetable); // cucumber, tomatoes, onion
// }

// // iterate over values (amounts)
// for (let amount of recipeMap.values()) {
//   alert(amount); // 500, 350, 50
// }

// // iterate over [key, value] entries
// for (let entry of recipeMap) { // the same as of recipeMap.entries()
//   alert(entry); // cucumber,500 (and so on)
// }

// recipeMap.forEach( (value, key, map) => {
//   alert(`${key}: ${value}`); // cucumber: 500 etc
// });

const arr = [{id: 1, name: 'one'}, {id: 2, name: 'two'}, {id: 1, name: 'one'}]

const ids = arr.map(o => o.id)

const filtered = arr.filter(({id}, index) => !ids.includes(id, index + 1))

console.log(filtered)


// removes duplicates

        // let books = [
        //         { title: "C++", author: "Bjarne" },
        //         { title: "Java", author: "James" },
        //         { title: "Python", author: "Guido" },
        //         { title: "Java", author: "James" },
        //     ];
              
        //     jsonObject = books.map(JSON.stringify);

        //     uniqueSet = [...new Set(jsonObject)];

        //     uniqueArray = uniqueSet.map(JSON.parse);
      
        //     console.log(uniqueArray);
        
        
        // let chars = ['A', 'B', 'A', 'C', 'B'];

        // let uniqueChars = [...new Set(chars)];
        
    //     var arr = ["apple", "mango",
    //     "apple", "orange", "mango", "mango"];
 
    //     var unique = [];
    //     arr.forEach(element => {
    //         if (!unique.includes(element)) {
    //             unique.push(element);
    //         }
    //     });
 
    // console.log(unique);
    
    // var arr = ["apple", "mango",
    //     "apple", "orange", "mango", "mango"];
 
    //     var unique = [];
    //     for(i=0; i < arr.length; i++){ 
    //         if(unique.indexOf(arr[i]) === -1) { 
    //             unique.push(arr[i]); 
    //         } 
    //     }
    // console.log(unique);
    
// removes duplicates end

 // arr = [1, 2, 3, 4, 5]

// const test = arr.splice(0,2)

// arr.splice(4,0, ...test)
// console.log(arr)

// var arr = [1,2,3,4,5,0,-1,-2,-3,-4];
// function sortNumber(a, b) {
//   return a - b;
// }
// console.log( arr.sort(sortNumber));


// var arr = [1,2,3,4,5,0,-1,-2,-3,-4];

// let newarr = []
// let newarr2 = []
// for(let array of arr){
//     if(array>0){
//         newarr.push(array)
//     }
//     if(array<=0){
//         newarr2.push(array)
//     }
// }
//  console.log(newarr2.reverse().concat(newarr))



// var student = {
// name : "David Rayy",
// sclass : "VI",
// rollno : 12 };

// for(let object in student){
//     console.log(object)
//      console.log(student[object])
// }

    
    // const o1 = { a: 1 };
    // const o2 = { b: 2 };
    // const o3 = { c: 3 };
    
    // const obj = Object.assign(o1, o2, o3);
    // console.log(obj); 
    // console.log(o1); 
    
//     const obj = { foo: 'bar', baz: 42 };
// Object.entries(obj).forEach(([key, value]) => console.log(`${key}: ${value}`));

//   let codes = {
//   "49": "Germany",
//   "41": "Switzerland",
//   "44": "Great Britain",
//   // ..,
//   "1": "USA"
// };

// for (let code in codes) {
//   console.log(code);
// }

// let codes = {
//   "+49": "Germany",
//   "+41": "Switzerland",
//   "+44": "Great Britain",
//   // ..,
//   "+1": "USA"
// };

// for (let code in codes) {
//   alert( +code ); // 49, 41, 44, 1
// }


// function makeUser(name, age) {
//   return {
//     name: name,
//     age: age,
//     // ...other properties
//   };
// }

// let user = makeUser("John", 30);
// alert(user.name); // John

// let obj = {
//   test: undefined,
//   age:"anuj"
// };

// alert( obj.test); // it's undefined, so - no such property?

// alert( "test" in obj ); // true, the property does exist!

// imp
//   function reorder(arr, index, n) {
//         var temp = [...Array(n)];

//         for (var i = 0; i < n; i++) temp[index[i]] = arr[i];
 
//         // Copy temp[] to arr[]
//         for (var i = 0; i < n; i++) {
//           arr[i] = temp[i];
//           index[i] = i;
//         }
//       }

//       var arr = [50, 40, 70, 60, 90,100,78];
//       var index = [3, 0, 4, 6, 2,1,5];
//       var n = arr.length;

//       reorder(arr, index, n);

//       for (var i = 0; i < n; i++) document.write(arr[i] + " ");
    
      
      
      
      // let obj = {
//   test: undefined
// };

// if(!obj.test ){
//     console.log(false)
// }

// // alert( obj.test ); // it's undefined, so - no such property?

// alert( "test" in obj )

// let user = {
//   name: "John",
//   age: 30
// };

// let clone = Object.assign({}, user);
// console.log(clone)

// let user = { name: "John" };

// let permissions1 = { canView: true };
// let permissions2 = { canEdit: true };

// Object.assign(permissions1, permissions2,user);

// console.log(permissions1)

// let user = {
//   name: "John"
// };

// let admin = user;
// user=null

// console.log(user)

// let user = {
//   name: "John",
//   age: 30
// };

// user.sayHi = () => alert("Hello!");

// user.sayHi(); // Hello!


// let user = {
//   name: "John",
//   age: 30,

//   sayHi() {
//     alert( this.name ); // leads to an error
//   }

// };


// let admin = user;
// user = null; // overwrite to make things obvious

// admin.sayHi();

// let user = {
//   firstName: "Ilya",
//   sayHi() {
//     let arrow = () => alert(this.firstName);
//     arrow();
//   }
// };

// user.sayHi(); // Ilya

// let prices = {
//   banana: 1,
//   orange: 2,
//   meat: 4,
// };

// const newarr = Object.keys(prices)
// const newarr2 =Object.values(prices) 
// const newarr3 = Object.entries(prices).map(entry => [entry[0], entry[1] * 2]
// );

// // const sec = Object.fromEntries(newarr)
// console.log(newarr2)

// 1) Write a JavaScript program to check two numbers and return true if one of the number is
//   100 or if the sum of the two numbers is 100
   
//   const product = (a,b) => a === 100 || b===100 || (a+b) === 100
   
//   console.log(product(0,100))
//   console.log(product(100,0))
//   console.log(product(80,20))
//   console.log(product(50,50))
  
//   2)  Write a JavaScript exercise to get the extension of a filename.

// const product = (str) => str.slice(str.lastIndexOf('.'))

// console.log(product('index.html'))
// console.log(product('index.js'))
// console.log(product('weboack.config.js'))

// 3)Write a JavaScript program to replace every character in a given string with the character
// following it in the alphabet

// const product = (str) => {
//   return  str.split('')
//     .map(char => String.fromCharCode(char.charCodeAt(0)+1)).join('')}
// console.log(product('abdz'))

// 4) Write a JavaScript program to get the current date.
// Expected Output : mm-dd-yyyy, mm/dd/yyyy or dd-mm-yyyy, dd/mm/yyyy

// const date = new Date()
// const days = date.getDate()
// const month = date.getMonth()
// const year = date.getFullYear()

// console.log(`${days}/${month}/${year}`)

// 5)Write a JavaScript program to create a new string adding "New!" in front of a given string. If the given string begins with "New!" already then return the original string.

// const string = (str) => str.indexOf('New!') === 0 ? str : `New! ${str}`

// console.log(string(' hello'))

// 6)Write a JavaScript program to create a new string from a given string taking the last 3
// characters and added at both the front and back. The string length must be 3 or more, if
// not, the original string is returned.

// const result = (str) => str.length < 3 ? str : str.slice(0,3) + str.slice(-3);
// console.log(result('ankitpatidar'))

// 7)Write a JavaScript program to extract the first half of a string of even length

// const result = (str)=> str.slice(0,str.length/2);
// console.log(result('ankitpatidar'))


// 8)Write a JavaScript program to concatenate two strings except their first character.

// const result = (str1 , str2)=> str1.slice(1) + str2.slice(1)
// console.log(result('hello','world'))

// 9)Given two values, write a JavaScript program to find out which one is nearest to 100

// const result = (a,b) => (100 - a) < (100-b) ? a : b ; 
// console.log(result(49,51))
// console.log(result(121,151))

// 10)Write a JavaScript program to check a given string contains 2 to 4 occurrences of a specified character.

// const count = (str,char) => str.split('').filter(ch => ch === char ).length ; 
// // console.log(count('ooooh','o'))

// const result = (str,char)=> count(str,char) >=2 && count(str,char) <=4;

// console.log(result('ooooh','o'))
// console.log(result('oooh','o'))
// console.log(result('oooooh','o'))

// split String 

// 1)
// const names = 'Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand '
// console.log(names)

// const nameList = names.split(';')
// console.log(nameList)

// 2)
// const myString = 'Hello World. How are you doing?'
// const splits = myString.split(' ', 3)
// console.log(splits)

// 3)
// const myString = 'Hello 1 word. Sentence number 2'
// const splits = myString.split(/(\d)/)

// console.log(splits)

// Part 03

// Exercise 1:
// Write a JavaScript program to find the number of even digits in a an array of integers

// const totalEven = (arr)=> arr.filter(item => item%2 == 0).length
// console.log(totalEven([2,4,6,7,8,9]))

// const totalEvenshowInArray = (arr)=> arr.filter(item => item%2 == 0)
// console.log(totalEvenshowInArray([2,4,6,7,8,9]))


// Exercise 2:
// Write a JavaScript program to find the number of even values up to a given number

// const totalEven = (arr)=> arr.filter(item => item%2 == 0).length

//  const arrnew = []
// const arry = (arr)=>{
   
    
//     for(i=1; i<=arr; i++){
//         arrnew.push(i)
//     }
//      return arrnew
// }
// console.log(arry(8))
// console.log(totalEven(arry(8)))


// Exercise 3:
// Write a JavaScript program to check whether a given array of integers is sorted in ascending
// order

// const isAscending = (arr)=>{
//     for(i=0; i<arr.length; i++){
//         if(arr[i+1]<arr[i]) return false;
//     } return true;
// }
// console.log(isAscending([1,2,3,4]))

// let arr = [1,2,3,4,5];
// const func = (arr) => {
// for(i=0; arr.length; i++)
// {
//     for(j=0; j<=i; j++){
//         if(arr[i]<arr[j])return false;
//     }
//     if(i==arr.length)return true;
// }
// }
// console.log(func(arr))

// Exercise 4:
// Write a JavaScript program to get the largest even number from an array of integers

// const largestEven = (arr)=>{
// //   const test =  Math.max(...arr)
//  const test =  Math.max(...arr.filter(num  => num%2 == 0))
//     console.log(test)
// }

// largestEven([1,2,34,4,5,6,75,98])


// Exercise 5:
// Write a JavaScript program to replace the first digit in a string (should contain at least one
// digit) with a $ character.


// const result = (str)=> str.replace(/[0-9]/,'$')

// console.log(result('abch8afd'))
// console.log(result('abc123ddf'))

// Part 04

// Exercise 1:
// Given a year, report if it is a leap year.

// const isLeapYear = (year)=> year%4 === 0 ;
// console.log(isLeapYear(2014))
// console.log(isLeapYear(2015))
// console.log(isLeapYear(2016))
// console.log(isLeapYear(2017))
// console.log(isLeapYear(2018))
// console.log(isLeapYear(2019))
// console.log(isLeapYear(2020))

// Exercise 2:
// Write a JavaScript program to compare two objects to determine if the first one contains
// the same properties as the second one (which may also have additional properties). For
// example, objA and objB are equal (but not equal to objC).
// const objA = { a: 1, b: 1, c: 1 };
// const objB = { a: 1, b: 1, c: 1 };
// const objC = { a: 1, b: 1, d: 1 };

// const result = (a,b)=> Object.keys(a).every(keys => b[keys])
// console.log(result(objA,objB))

// Exercise 3:
// Write a JavaScript program to convert a comma-separated values (CSV) string to a 2D array.
// A new line indicates a new row in the array. Example input:

// const string = `abc,def,ghi
// jkl,mno,pqr
// stu,vwx,yza`
                 
// const result = (str)=> str.split('\n').map(ce=> ce.split(','))
// console.log(result(string))

// Exercise 4:
// Write a JavaScript program to generate a random hexadecimal color code.

// const hexacode =()=> Math.floor(Math.random()*16).toString(16)

// const array = Array.from({length:6})
// // console.log(array)

// const gethexa = ()=> '#' + array.map(hexacode).join('')
// console.log(gethexa())

// Exercise 5:
// Write a JavaScript function that returns true if the provided predicate function returns true
// for all elements in a collection, false otherwise.


// every method 
// const array = [3,4,5,6]

// const newarr = array.every(ce=> ce>2 && true)

// console.log(newarr)


// Part 05
// Exercise 1:
// Write a JavaScript function that returns a passed string with letters in alphabetical order.
// Example string: 'webmaster'
// Expected Output: 'abeemrstw'
// Exercise 2:
// Write a JavaScript function that accepts a string as a parameter and counts the number of
// vowels within the string.
// Exercise 3:
// Write a JavaScript function to convert an amount to coins.
// Example input: 46 and possible coins 25, 10, 5, 2, 1
// Output: 25, 10, 10, 1
// Exercise 4:
// Write a JavaScript function to extract unique characters from a string.
// Exercise 5:
// Write a JavaScript function to find the first not repeated character
// Example string: 'abacddbec'
// Expected output: 'e'











